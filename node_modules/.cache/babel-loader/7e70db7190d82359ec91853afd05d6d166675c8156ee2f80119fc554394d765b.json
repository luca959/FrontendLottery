{"ast":null,"code":"var _jsxFileName = \"/Users/talos/Desktop/lottery/src/util/interact.js\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x7e9F4EfA5D175897373C3a8E1E275D0AA85797A7\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\";\nexport const ChristmasLotteryContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n    try {\n      // try to connect to Metamask. Calling this function will open up Metamask in the browser\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        // take the first address in the array of addresses and display it to the user in our Wallet\n        address: addressArray[0]\n      };\n      return obj;\n      // if user denies access to their Metamask account, .request() will throw an error.\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ðŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: INST_METAMASK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this)\n    };\n  }\n};","map":{"version":3,"names":["Web3","jsxDEV","_jsxDEV","infuraKey","web3","providers","HttpProvider","contractABI","require","contractAddress","INST_METAMASK","ChristmasLotteryContract","eth","Contract","connectWallet","window","ethereum","addressArray","request","method","obj","address","err","status","message","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/talos/Desktop/lottery/src/util/interact.js"],"sourcesContent":["import Web3 from 'web3';\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x7e9F4EfA5D175897373C3a8E1E275D0AA85797A7\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\"\n\nexport const ChristmasLotteryContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n      try {\n          // try to connect to Metamask. Calling this function will open up Metamask in the browser\n          const addressArray = await window.ethereum.request({\n              method: \"eth_requestAccounts\",\n          });\n          const obj = {\n              // take the first address in the array of addresses and display it to the user in our Wallet\n              address: addressArray[0],\n          };\n          return obj;\n          // if user denies access to their Metamask account, .request() will throw an error.\n      } catch (err) {\n          return {\n              address: \"\",\n              status: \"ðŸ˜¥ \" + err.message,\n          };\n      }\n  } else {\n      return {\n          address: \"\",\n          status: (\n              <span>\n                  <p>\n                      {\" \"}\n                      ðŸ¦Š{\" \"}\n                      <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                          {INST_METAMASK}\n                      </a>\n                  </p>\n              </span>\n          ),\n      };\n  }\n};"],"mappings":";AAAA,OAAOA,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxB,MAAMC,SAAS,GAAG,+DAA+D;AACjF,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAAC,IAAIA,IAAI,CAACK,SAAS,CAACC,YAAY,CAACH,SAAS,CAAC,CAAC;AACjE,MAAMI,WAAW,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACnD,MAAMC,eAAe,GAAG,4CAA4C;AACpE,MAAMC,aAAa,GAAG,4CAA4C;AAElE,OAAO,MAAMC,wBAAwB,GAAG,IAAIP,IAAI,CAACQ,GAAG,CAACC,QAAQ,CACzDN,WAAW,EACXE,eACF,CAAC;AACH,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC;EACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACjB,IAAI;MACA;MACA,MAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC/CC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMC,GAAG,GAAG;QACR;QACAC,OAAO,EAAEJ,YAAY,CAAC,CAAC;MAC3B,CAAC;MACD,OAAOG,GAAG;MACV;IACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;MACV,OAAO;QACHD,OAAO,EAAE,EAAE;QACXE,MAAM,EAAE,KAAK,GAAGD,GAAG,CAACE;MACxB,CAAC;IACL;EACJ,CAAC,MAAM;IACH,OAAO;MACHH,OAAO,EAAE,EAAE;MACXE,MAAM,eACFrB,OAAA;QAAAuB,QAAA,eACIvB,OAAA;UAAAuB,QAAA,GACK,GAAG,EAAC,cACH,EAAC,GAAG,eACNvB,OAAA;YAAGwB,MAAM,EAAC,QAAQ;YAACC,IAAI,EAAG,mCAAmC;YAAAF,QAAA,EACxDf;UAAa;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAEd,CAAC;EACL;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}