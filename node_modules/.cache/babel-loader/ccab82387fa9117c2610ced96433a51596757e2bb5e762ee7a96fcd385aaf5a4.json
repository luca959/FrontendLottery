{"ast":null,"code":"var _jsxFileName = \"/Users/talos/Desktop/lottery/src/util/interact.js\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xeBE029524cfa82341ddd8082d4d0f4Da7468c200\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\";\nexport const ChristmasLotteryContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n    try {\n      // try to connect to Metamask. Calling this function will open up Metamask in the browser\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        // take the first address in the array of addresses and display it to the user in our Wallet\n        address: addressArray[0]\n      };\n      return obj;\n      // if user denies access to their Metamask account, .request() will throw an error.\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: INST_METAMASK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this)\n    };\n  }\n};\nexport const getAllPartecipants = async walletAddress => {\n  try {\n    const message = await ChristmasLotteryContract.methods.GetAllPartecipants().call({\n      from: walletAddress\n    });\n    let partecipants = [];\n    for (let i = 0; i < message.length; i++) {\n      partecipants.push(message[i][1] + ' ' + message[i][2]);\n    }\n    console.log('message:', partecipants);\n    return {\n      Partecipant: partecipants,\n      status: \"✅ Success!\"\n    };\n  } catch (error) {\n    console.error('Error retrieving participants:', error);\n    return {\n      Partecipant: \"Only the owner can see the participants\",\n      status: \"Some error occurred while retrieving the participants 😥 \"\n    };\n  }\n};\nexport const GetLastTicketSold = async walletAddress => {\n  try {\n    const lastP = await ChristmasLotteryContract.methods.getLastTicketSold().call({\n      from: walletAddress\n    });\n    console.log('message:', lastP[1] + '' + lastP[2]);\n    let last = [];\n    last.push(lastP[1] + ' ' + lastP[2]);\n    return {\n      LastPartecipant: last,\n      status: \"✅ Success!\"\n    };\n  } catch (error) {\n    console.error('Error retrieving participants:', error);\n    return {\n      LastPartecipant: \"Only the owner can see the last participant\",\n      status: \"Some error occurred while retrieving the Last participant 😥 \"\n    };\n  }\n};\n_c = GetLastTicketSold;\nexport const getNumOfPartecipants = async walletAddress => {\n  try {\n    const np = await ChristmasLotteryContract.methods.GetNumOfPartecipants().call({\n      from: walletAddress\n    });\n    let number = [];\n    number.push(np);\n    number[0] = number[0].toString();\n    console.log('number:', number);\n    return {\n      NumPartecipant: number,\n      status: \"✅ Success!\"\n    };\n  } catch (error) {\n    console.error('Error retrieving participants:', error);\n    return {\n      NumPartecipant: \"Only the owner can see the number of participants\",\n      status: \"Some error occurred while retrieving the Number of participant 😥 \"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: INST_METAMASK\n    };\n  }\n};\nexport const sellTicket = async (walletAddress, Name, Surname, Ticket) => {\n  try {\n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress,\n      // Required except during contract publications.\n      from: walletAddress,\n      // must match user's active address.\n      data: ChristmasLotteryContract.methods.SellTicket(Name, Surname, Ticket).encodeABI()\n    };\n    //sign the transaction\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    // show a message to the user that the transaction has been sent\n    return {\n      resultTransaction: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }, this)\n    };\n  } catch (error) {\n    // in case of an error, show a message to the user\n    // a possible error is that the user rejected the transaction\n    console.error(`Error during the transaction:`, error);\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"GetLastTicketSold\");","map":{"version":3,"names":["Web3","jsxDEV","_jsxDEV","infuraKey","web3","providers","HttpProvider","contractABI","require","contractAddress","INST_METAMASK","ChristmasLotteryContract","eth","Contract","connectWallet","window","ethereum","addressArray","request","method","obj","address","err","status","message","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber","getAllPartecipants","walletAddress","methods","GetAllPartecipants","call","from","partecipants","i","length","push","console","log","Partecipant","error","GetLastTicketSold","lastP","getLastTicketSold","last","LastPartecipant","_c","getNumOfPartecipants","np","GetNumOfPartecipants","number","toString","NumPartecipant","getCurrentWalletConnected","sellTicket","Name","Surname","Ticket","transactionParameters","to","data","SellTicket","encodeABI","txHash","params","resultTransaction","$RefreshReg$"],"sources":["/Users/talos/Desktop/lottery/src/util/interact.js"],"sourcesContent":["import Web3 from 'web3';\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xeBE029524cfa82341ddd8082d4d0f4Da7468c200\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\"\n\nexport const ChristmasLotteryContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n      try {\n          // try to connect to Metamask. Calling this function will open up Metamask in the browser\n          const addressArray = await window.ethereum.request({\n              method: \"eth_requestAccounts\",\n          });\n          const obj = {\n              // take the first address in the array of addresses and display it to the user in our Wallet\n              address: addressArray[0],\n          };\n          return obj;\n          // if user denies access to their Metamask account, .request() will throw an error.\n      } catch (err) {\n          return {\n              address: \"\",\n              status: \"😥 \" + err.message,\n          };\n      }\n  } else {\n      return {\n          address: \"\",\n          status: (\n              <span>\n                  <p>\n                      {\" \"}\n                      🦊{\" \"}\n                      <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                          {INST_METAMASK}\n                      </a>\n                  </p>\n              </span>\n          ),\n      };\n  }\n};\nexport const getAllPartecipants = async (walletAddress) => {\n  try {\n      const message = await ChristmasLotteryContract.methods.GetAllPartecipants().call({from: walletAddress});\n      let partecipants = [];\n      for(let i=0; i<message.length; i++){\n          partecipants.push(message[i][1]+' '+message[i][2]);\n      }\n      console.log('message:', partecipants);   \n      return {\n          Partecipant: partecipants,\n          status: \"✅ Success!\"\n      };\n\n  }\n  catch (error) {\n      console.error('Error retrieving participants:', error);\n      return {\n          Partecipant: \"Only the owner can see the participants\",\n          status: \"Some error occurred while retrieving the participants 😥 \"\n      };\n  }\n};\nexport const GetLastTicketSold = async (walletAddress) => {\n  try {\n      const lastP = await ChristmasLotteryContract.methods.getLastTicketSold().call({from: walletAddress});\n      console.log('message:', lastP[1]+''+lastP[2]);\n      let last=[];\n      last.push(lastP[1]+' '+lastP[2]);\n      return {\n          LastPartecipant: last,\n          status: \"✅ Success!\"\n      };\n  }\n  catch (error) {\n      console.error('Error retrieving participants:', error);\n      return {\n          LastPartecipant:\"Only the owner can see the last participant\" ,\n          status: \"Some error occurred while retrieving the Last participant 😥 \"\n      };\n  }\n};\n\nexport const getNumOfPartecipants = async (walletAddress) => {\n  try {\n      const np = await ChristmasLotteryContract.methods.GetNumOfPartecipants().call({from: walletAddress});\n      let number=[];\n      number.push(np);\n      number[0]=number[0].toString();\n      console.log('number:', number);\n      return {\n          NumPartecipant: number,\n          status: \"✅ Success!\"\n      };\n  }\n  catch (error) {\n      console.error('Error retrieving participants:', error);\n      return {\n          NumPartecipant: \"Only the owner can see the number of participants\",\n          status: \"Some error occurred while retrieving the Number of participant 😥 \"\n      };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: INST_METAMASK\n    };\n  }\n}\nexport const sellTicket = async (walletAddress,Name,Surname,Ticket) => {\n  try {\n      //set up transaction parameters\n      const transactionParameters = {\n          to: contractAddress, // Required except during contract publications.\n          from: walletAddress, // must match user's active address.\n          data: ChristmasLotteryContract.methods.SellTicket(Name,Surname,Ticket).encodeABI(),\n      };\n      //sign the transaction\n      const txHash = await window.ethereum.request({\n          method: \"eth_sendTransaction\",\n          params: [transactionParameters],\n      });\n      // show a message to the user that the transaction has been sent\n      return {\n          resultTransaction: (\n              <span>\n                  ✅{\" \"}\n                  <a  href={`https://sepolia.etherscan.io/tx/${txHash}`}>\n                      View the status of your transaction on Etherscan!\n                  </a>\n              </span>\n          ),\n      };\n  } catch (error) {\n      // in case of an error, show a message to the user\n      // a possible error is that the user rejected the transaction\n      console.error(`Error during the transaction:`, error);\n      return {\n          status: \"😥 \" + error.message,\n      };\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}