{"ast":null,"code":"var _jsxFileName = \"/Users/talos/Desktop/lottery/src/util/interact.js\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xeBE029524cfa82341ddd8082d4d0f4Da7468c200\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\";\nexport const ChristmasLotteryContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n    try {\n      // try to connect to Metamask. Calling this function will open up Metamask in the browser\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        // take the first address in the array of addresses and display it to the user in our Wallet\n        address: addressArray[0]\n      };\n      return obj;\n      // if user denies access to their Metamask account, .request() will throw an error.\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: INST_METAMASK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: INST_METAMASK\n    };\n  }\n};\nexport const sellTicket = async (walletAddress, Name, Surname, Ticket) => {\n  let name = Name;\n  let surname = Surname;\n  let ticket = Ticket;\n  try {\n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress,\n      // Required except during contract publications.\n      from: walletAddress,\n      // must match user's active address.\n      data: ChristmasLotteryContract.methods.SellTicket(Name, Surname, Ticket).encodeABI()\n    };\n    //sign the transaction\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    // show a message to the user that the transaction has been sent\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    // in case of an error, show a message to the user\n    // a possible error is that the user rejected the transaction\n    console.error(`Error during the transaction :`, error);\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"names":["Web3","jsxDEV","_jsxDEV","infuraKey","web3","providers","HttpProvider","contractABI","require","contractAddress","INST_METAMASK","ChristmasLotteryContract","eth","Contract","connectWallet","window","ethereum","addressArray","request","method","obj","address","err","status","message","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentWalletConnected","length","sellTicket","walletAddress","Name","Surname","Ticket","name","surname","ticket","transactionParameters","to","from","data","methods","SellTicket","encodeABI","txHash","params","error","console"],"sources":["/Users/talos/Desktop/lottery/src/util/interact.js"],"sourcesContent":["import Web3 from 'web3';\nconst infuraKey = \"https://sepolia.infura.io/v3/4af429facfe24c50ac278feda80bf2b2\";\nconst web3 = new Web3(new Web3.providers.HttpProvider(infuraKey));\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xeBE029524cfa82341ddd8082d4d0f4Da7468c200\";\nconst INST_METAMASK = \"You must install Metamask in your browser.\"\n\nexport const ChristmasLotteryContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\nexport const connectWallet = async () => {\n  // checks if window.ethereum is installed in browser\n  if (window.ethereum) {\n      try {\n          // try to connect to Metamask. Calling this function will open up Metamask in the browser\n          const addressArray = await window.ethereum.request({\n              method: \"eth_requestAccounts\",\n          });\n          const obj = {\n              // take the first address in the array of addresses and display it to the user in our Wallet\n              address: addressArray[0],\n          };\n          return obj;\n          // if user denies access to their Metamask account, .request() will throw an error.\n      } catch (err) {\n          return {\n              address: \"\",\n              status: \"😥 \" + err.message,\n          };\n      }\n  } else {\n      return {\n          address: \"\",\n          status: (\n              <span>\n                  <p>\n                      {\" \"}\n                      🦊{\" \"}\n                      <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                          {INST_METAMASK}\n                      </a>\n                  </p>\n              </span>\n          ),\n      };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: INST_METAMASK\n    };\n  }\n}\nexport const sellTicket = async (walletAddress,Name,Surname,Ticket) => {\n  let name = Name;\n  let surname = Surname;\n  let ticket = Ticket;\n  try {\n    //set up transaction parameters\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: walletAddress, // must match user's active address.\n        data: ChristmasLotteryContract.methods.SellTicket(Name,Surname,Ticket).encodeABI(),\n    };\n    //sign the transaction\n    const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n    });\n    // show a message to the user that the transaction has been sent\n    return {\n        status: (\n            <span>\n                ✅{\" \"}\n                <a target=\"_blank\" href={`https://sepolia.etherscan.io/tx/${txHash}`}>\n                    View the status of your transaction on Etherscan!\n                </a>\n            </span>\n        ),\n    };\n} catch (error) {\n    // in case of an error, show a message to the user\n    // a possible error is that the user rejected the transaction\n    console.error(`Error during the transaction :`, error);\n    return {\n        status: \"😥 \" + error.message,\n    };\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}